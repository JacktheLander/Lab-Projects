# ******************************************************************************
# import modules
# ******************************************************************************
import argparse, re
import pandas as pd
import numpy as np
import torch

# ******************************************************************************
# Functions in this module
# ******************************************************************************
def ReadArguments():
	# process the arguments
	ap = argparse.ArgumentParser()
	ap.add_argument("-f", "--Netlist", type=str, required=True,
			help = "Netlist file for circuit.")

	# **************************************************************************
	# get the arguments
	# **************************************************************************
	args = ap.parse_args()
	return args

# ******************************************************************************
def _ConvertSIEqUnit(Val):
	"""
		This function is generated by AI.
		Converts a value with an SI Prefix to its decimal equivalent.
	Args:
		Val: A string representing the value with the SI Prefix
						 (e.g., "2.5k", "10M", "300m").
	Returns:
		A float representing the decimal equivalent of the input value,
		or None if the input is invalid.
	"""
	SI_Prefixes = {
		"Y": 1e24, "Z": 1e21, "E": 1e18, "P": 1e15, "T": 1e12,
		"G": 1e9, "Meg": 1e6, "M": 1e6, "K": 1e3, "k": 1e3, "h": 1e2, "da": 1e1,
		"d": 1e-1, "c": 1e-2, "m": 1e-3, "u": 1e-6, "n": 1e-9,
		"p": 1e-12, "f": 1e-15, "a": 1e-18, "z": 1e-21, "y": 1e-24
	}

	# **************************************************************************
	# check for a single digit
	# **************************************************************************
	if (type(Val) is int) or (type(Val) is float):
		return Val
	if len(Val) > 1:
		# **********************************************************************
		# extract the non-digit string
		# **********************************************************************
		Prefix	= re.sub(r"\d", "", Val)

		# **********************************************************************
		# check the string for valid key
		# **********************************************************************
		if len(Prefix) > 0:
			# ******************************************************************
			# Retain Numbers in String
			# ******************************************************************
			RetVal 	= float(re.sub(r"[^\d]+", "", Val))
			if Prefix in SI_Prefixes:
				PrefVal	= SI_Prefixes[Prefix]
				RetVal	*= PrefVal
		else:
			RetVal 	= float(Val)
	else:
		RetVal	= float(Val)

	return RetVal

# ******************************************************************************
def ReadNetlist(Netlist, Verbose=False):
	# **************************************************************************
	# set the function name
	# **************************************************************************
	FunctionName = "ReadNetlist()"

	# **************************************************************************
	# display the message
	# **************************************************************************
	if Verbose:
		# **********************************************************************
		# display the information
		# **********************************************************************
		Msg = "...%-25s: read information from the netlist <%s>..." % (FunctionName,\
				Netlist)
		print(Msg)

	# **************************************************************************
	# column headers
	# **************************************************************************
	ColLbs      = ["DEV", "N1", "N2", "VAL"]

	# **************************************************************************
	# read the netlist
	# **************************************************************************
	CompInfo    = pd.read_csv(Netlist, delimiter=" ", header=None, index_col=False,\
			comment="*", skipinitialspace=True)
	CompInfo.columns = ColLbs
	CompInfo["DEV"]  = CompInfo["DEV"].str.upper()

	# **************************************************************************
	# convert values if there is a SI prefix
	# **************************************************************************
	CompInfo["VAL"]  = CompInfo["VAL"].apply(_ConvertSIEqUnit)

	# **************************************************************************
	# convert values if there is a SI prefix
	# **************************************************************************
	CompInfo["N1"] = CompInfo["N1"].astype(int)
	CompInfo["N2"] = CompInfo["N2"].astype(int)
	return CompInfo

# ******************************************************************************
def ExtractNetlist(NetlistInfo, TorchFlag=False, Verbose=False):
	# **************************************************************************
	# set the function name
	# **************************************************************************
	FunctionName = "ExtractNetlist()"

	# **************************************************************************
	# display the message
	# **************************************************************************
	if Verbose:
		# **********************************************************************
		# display the information
		# **********************************************************************
		Msg = "...%-25s: extract information from the netlist..." % (FunctionName)
		print(Msg)

	# **************************************************************************
	# component dictionary
	# **************************************************************************
	Comps	= {"V": "VsList" , "I": "IsList", "R": "RList", "C": "CList", "L": "LList", \
			"MR": "MRList", "MC": "MCList"}

	# **************************************************************************
	# create lists from the input data frame
	# **************************************************************************
	RetDic	= {}
	KeyVals	= []
	for Key, KeyVal in Comps.items():
		# **********************************************************************
		# search rows
		# **********************************************************************
		DfKey = NetlistInfo[NetlistInfo['DEV'].str.startswith(Key)]
		KeyVals.append(KeyVal)

		# **********************************************************************
		# check for empty frame
		# **********************************************************************
		if not DfKey.empty:
			ListVals		= DfKey[["N1", "N2", "VAL"]].values
			if TorchFlag:
				ListVals	= torch.from_numpy(ListVals)
			RetDic[KeyVal]	= {"Dev": DfKey["DEV"].values.astype(str),
					"List": ListVals}
		else:
			RetDic[KeyVal]	= None

	# **************************************************************************
	# save the key
	# **************************************************************************
	RetDic["KeyVals"]	= KeyVals
	return RetDic

# ******************************************************************************
def ReadAndExtractNetlist(Netlist, dt=None, TorchFlag=False, Verbose=False):
	# **************************************************************************
	# set the function name
	# **************************************************************************
	FunctionName = "ReadAndExtractNetlist()"

	# **************************************************************************
	# display the message
	# **************************************************************************
	if Verbose:
		# **********************************************************************
		# display the information
		# **********************************************************************
		Msg = "...%-25s: read and extract information from the netlist <%s>..." % (FunctionName,\
				Netlist)
		print(Msg)
	# **************************************************************************
	# read and extract netlist
	# **************************************************************************
	NetlistInfo	= ReadNetlist(Netlist, Verbose=Verbose)
	ParamInfo	= ExtractNetlist(NetlistInfo, TorchFlag=TorchFlag, Verbose=Verbose)

	# **************************************************************************
	# display the message
	# **************************************************************************
	# if Verbose:
	print("\nNetlist")
	print(NetlistInfo)

	# **************************************************************************
	# adding extract dictionary keys
	# **************************************************************************
	ParamInfo["dt"]	= dt
	ParamInfo["NodeList"] = np.unique((NetlistInfo["N1"], NetlistInfo["N2"]))

	return ParamInfo

# ******************************************************************************
if __name__ == '__main__':
	# **************************************************************************
	# process the arguments
	# **************************************************************************
	args = ReadArguments()

	# **************************************************************************
	# default values
	# **************************************************************************
	dt		= 1e-6
	Verbose	= True

	# **************************************************************************
	# read components from the netlist
	# **************************************************************************
	InParams	= ReadAndExtractNetlist(args.Netlist, dt=dt, Verbose=Verbose)
