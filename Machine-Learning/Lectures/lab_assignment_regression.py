# -*- coding: utf-8 -*-
"""Lab_Assignment_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19_ObZAUeOCCfmEYIzGFmjXorgHtUdlH-

**The goal of this assignment is to get familiar with data visualization and preparation process.**

Qestion 01: import the provided dataset ('Fish.csv') into the notebook. (5 points)
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
fish = pd.read_csv('Fish-1.csv')

"""Question 02: use the head() function to show the first 10 rows of the dataset. (5 points)"""

fish.head()

"""Question 03: use the info() function to show the information of the dataset. (5 points)"""

fish.info()

"""Question 04: (10 points) <br>
a) How many datapoints do we have in this dataset? <br>
b) What types of data we have in this dataset?

Answer question 04 by double clicking on this cell the typing your answers.

Question 05: use describe() function to extract some statistical information of the features/attributes in the dataset. (5 points)
"""

fish.describe()

"""Question 06: plot the histogram of features/attributes. (10 points) <br>
Make sure you have 20 bins in your histogram.
"""

p = sns.histplot(data=fish, bins=20)

"""Question 07: split your dataset into the train_set and test_set. <br>
Make sure the test_set size is %10 of your dataset. (10 points)
"""

from sklearn.model_selection import train_test_split
train_set, test_set = train_test_split(fish, test_size=0.1, random_state=10)

"""Question 08: plot a scatter diagram with "Height" on the x-axis, "Width" on the y-axis, and a circle representing each datapoint in your dataset; the radius of each circle should represent the "Weight" of the fish. (10 points) <br>
Make sure to plot the train_set, not the whole dataset.
"""

p = sns.scatterplot(data=train_set, x='Height', y='Width', size='Weight')
p.set_xlabel("Height")
p.set_ylabel("Width")

"""Question 09: show the correlation between features/attributes using correlation matrix. (5 points)"""

fish = fish.drop(columns='Species')
corr_matrix = fish.corr()
corr_matrix

"""Question 10: show the correlation between all the features with the "Weight" of the fish. (10 points) <br>
Make sure to set ascending to False.
"""

corr_matrix["Weight"].sort_values(ascending=False)

"""Question 11: split the dataset into the inputs and output. (5 points) <br>
"Weight" is the output/label/target and all the other columns are inputs.
"""

fish = train_set.drop(columns='Weight')
fish_labels = train_set['Weight'].copy()

"""Question 12: define two pipelines for numerical and categorical values. (15 points) <br>
Make sure the numerical pipeline includes SimpleImputer and StandardScaler.
Make sure the categorical pipeline includes SimpleImputer and OneHotEncoder
Make sure to include those pipelines in a ColumnTransformer (refer to the Data Visualization and Preparation notebook).
Make sure the output/label/"Weight" is not included in the pipeline.
"""

from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer

num_attribs = ['Length1', 'Length2', 'Length3', 'Height', 'Width']

cat_attribs = ['Species']

num_pipeline = Pipeline([
    ("impute", SimpleImputer(strategy="median")),
    ("standardize", StandardScaler()),
])

cat_pipeline = Pipeline([
    ("impute", SimpleImputer(strategy="most_frequent")),
    ("encode", OneHotEncoder()),
])

preprocessing = ColumnTransformer([
    ("num", num_pipeline, num_attribs),
    ("cat", cat_pipeline, cat_attribs),
])

"""Question 13: apply the pipeline to the dataset and generate prepared_dataset. (5 points)"""

fish_prepared = preprocessing.fit_transform(fish)

"""Question 14: Consider 10% of the data as the test  (5 points)."""

train_set, test_set = train_test_split(fish_prepared, test_size=0.1, random_state=10)

"""Question 15: train a linear regression model using sklearn LinearRegression(). Then, use the trained model, do the prediction on the train dataset and calculate the RMS. (40 points)"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

Model = Pipeline([("preprocess", preprocessing), ("linreg", LinearRegression())])
X = fish[['Species', 'Length1', 'Length2', 'Length3', 'Height', 'Width']]
y = fish[['Weight']]

Model.fit(X, y)

predictions = Model.predict(X)
mse = mean_squared_error(y, predictions)
rmse = np.sqrt(mse)
print(rmse)